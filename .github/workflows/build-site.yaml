on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

name: Build site

jobs:
  build:
    name: Build site
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install cURL Headers
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev

      - name: Get Hugo version
        id: hugo_vr
        run: |
          ver=$(cat .Rprofile | grep hugo.version | cut -d'"' -f2 )
          echo ".Rprofile sets hugo version to $ver"
          echo "hugo_v=${ver}" >> $GITHUB_ENV

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.hugo_v }}
          extended: true

      - name: Build
        run: |
          if [[ '${{github.ref}}' == 'refs/heads/main' ]]; then
            hugo -e production
          else
            hugo -b https://${{ github.head_ref }}--drmowinckels.netlify.app/
          fi

      - name: Deploy production üöÄ
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: public

      - name: Deploy to Netlify
        if: github.event_name == 'pull_request'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
            npm install netlify-cli -g
            netlify deploy --alias ${{ github.head_ref }}
        shell: sh

  announce:
    runs-on: ubuntu-latest
    needs: build
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: üìù Get latest blog post üìù
        run: |
          BLOG_PATH="content/blog"

          # Find the latest blog post
          latest_post=$(find "${BLOG_PATH}" | grep /index.md$ | grep -v "XX-XX" |sort | tail -n1)

          # extract date
          date=$(grep "^date:" "${latest_post}" | sed 's/^date: //' | sed 's/["'\'']//g')
          echo "POST_DATE=${date}" >> $GITHUB_ENV

          # Extract the URL from the slug
          slug=$(grep "^slug:" "${latest_post}" | sed 's/^slug: //' | sed 's/["'\'']//g')
          url="https://drmowinckels.io/blog/${slug}"
          echo "URL=${url}" >> $GITHUB_ENV

          # Extract image
          image=$(grep "^image:" "${latest_post}" | sed 's/^image: //' | sed 's/["'\'']//g')
          image=$(dirname ${latest_post})/${image}
          echo "IMAGE=${image}" >> $GITHUB_ENV

          # Extract the title from yaml
          title=$(grep "^title:" "${latest_post}" | sed 's/^title: //' | sed 's/["'\'']//g')
          echo "TITLE=${title}" >> $GITHUB_ENV

          # Extract summary using yml
          summary=$(awk '/summary:/ {getline; while ($0 !~ /^$/) {gsub(/^[[:blank:]]+/,"",$0); summary = summary $0 " "; getline}} END {gsub(/[[:blank:]]+$/,"",summary); print summary}' "${latest_post}")
          echo "SUMMARY=${summary}" >> $GITHUB_ENV

          # Extract tags
          tags=$(awk '/tags:/ {getline; while ($0 ~ /^  - /) {printf "#%s ", $2; getline}}' ${latest_post})
          hastags=$(echo $tags| sed -e 's/#r /#rstats /')
          echo "TAGS=${hastags}" >> $GITHUB_ENV

      - name: ü¶π Insert random fun emoji ü¶≤
        run: |
          emojis=("ü¶Ñ" "ü¶ú" "ü¶£" "ü¶•" "ü¶¶" "ü¶ß" "ü¶®" "ü¶©" "ü¶™" \
              "ü¶´" "ü¶¨" "ü¶≠" "ü¶Æ" "ü¶Ø" "ü¶∞" "ü¶±" "ü¶≤" "ü¶≥" "ü¶¥" \
              "ü¶µ" "ü¶∂" "ü¶∑" "ü¶∏" "ü¶π" "ü¶∫" "ü¶ª" "ü¶º" "ü¶Ω" "ü¶æ" \
              "ü¶ø" "üßÄ" "üßÅ" "üßÇ" "üßÉ" "üßÑ" "üßÖ" "üßÜ" "üßá" "üßà" \
              "üßâ" "üßä" "üßã" "üßå" "üßç" "üßé" "üßè" "üßê" "üßë" "üßí" \
              "üßì" "üßî" "üßï" "üßñ" "üßó" "üßò" "üßô" "üßö" "üßõ" "üßú" \
              "üßù" "üßû" "üßü" "üß†" "üß°" "üß¢" "üß£" "üß§" "üß•" "üß¶" \
              "üßß" "üß®" "üß©" "üß™" "üß´" "üß¨" "üß≠" "üßÆ" "üßØ" "üß∞" \
              "üß±" "üß≤" "üß≥" "üß¥" "üßµ" "üß∂" "üß∑" "üß∏" "üßπ" "üß∫" \
              "üßª" "üßº" "üßΩ" "üßæ" "üßø")
          random_emoji=${emojis[$RANDOM % ${#emojis[@]}]}
          echo "EMOJI=${random_emoji}" >> $GITHUB_ENV

      - name: Check post date
        run: |
          post_date=$(date -d "${{ env.POST_DATE }}" +%Y%m%d)
          two_days_ago=$(date -d "-2 days" +%Y%m%d)
          if (( post_date > two_days_ago )); then
            echo "Post date is within the last 2 days"
            echo "TOOT=true" >> $GITHUB_ENV
          else
            echo "Post date is older than 2 days"
            echo "TOOT=false" >> $GITHUB_ENV
          fi


      - name: ü¶£ Toot it! ü¶£
        if: ${{ env.TOOT }}
        env:
          MASTODON_INSTANCE: fosstodon.org
          MASTO_KEY: ${{ secrets.MASTO_KEY }}
        run:  |
          # First, upload the media and get the media ID
          MEDIA_ID=$(curl -X POST \
            -H "Authorization: Bearer ${MASTO_KEY}" \
            -F "file=@./${{ env.IMAGE }}" \
            https://${MASTODON_INSTANCE}/api/v1/media | jq -r '.id')

          message=$(echo -e "üìù New blog post üìù
            \n\n '${{ env.TITLE }}' \
            \n\n ${{ env.EMOJI }}  ${{ env.SUMMARY }} \
            \n\n üëÄ  Read more at ${{ env.URL }} \
            \n\n ${{ env.TAGS }}")

          # Then, create a new status with the media attached
          toot=$(curl -X POST \
            -H "Authorization: Bearer ${MASTO_KEY}" \
            -F "status=${message}" \
            -F "media_ids[]=${MEDIA_ID}" \
            https://${MASTODON_INSTANCE}/api/v1/statuses | jq -r '.id')

          # Display clickable url
          echo "ü¶£ Tooted! ü¶£"
          echo "https://${MASTODON_INSTANCE}/web/statuses/${toot}"





