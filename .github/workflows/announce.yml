on: [workflow_dispatch]


name: Announce on social media

jobs:
  announce:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PROFILE: social_media
    steps:
      - uses: actions/checkout@v2
      - name: Get curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 📝 Get latest blog post 📝
        run: |
          BLOG_PATH="content/blog"

          # Find the latest blog post
          latest_post=$(find -f "${BLOG_PATH}" | grep /index.md$ | grep -v "XX-XX" |sort | tail -n1)

          # extract date
          date=$(grep "^date:" "${latest_post}" | sed 's/^date: //' | sed 's/["'\'']//g')
          echo "POST_DATE=${date}" >> $GITHUB_ENV

          # Extract the URL from the slug
          slug=$(grep "^slug:" "${latest_post}" | sed 's/^slug: //' | sed 's/["'\'']//g')
          url="https://drmowinckels.io/blog/${slug}"

          # Extract image
          image=$(grep "^image:" "${latest_post}" | sed 's/^image: //' | sed 's/["'\'']//g')
          image=$(printf 'content/blog/%s/%s' ${slug} ${image})
          echo "IMAGE=${image}" >> $GITHUB_ENV

          # Extract the title from yaml
          title=$(grep "^title:" "${latest_post}" | sed 's/^title: //' | sed 's/["'\'']//g')

          # Extract summary using yml
          summary=$(awk '/summary:/ {getline; while ($0 !~ /^$/) {gsub(/^[[:blank:]]+/,"",$0); print $0; getline}}' ${latest_post})

          # Extract tags
          tags=$(awk '/tags:/ {getline; while ($0 ~ /^  - /) {printf "#%s ", $2; getline}}' ${latest_post})
          hastags=$(echo $tags| sed -e 's/#r /#rstats /')

          # Insert random fun emoji
          emojis=("🦄" "🦜" "🦣" "🦥" "🦦" "🦧" "🦨" "🦩" "🦪" \
              "🦫" "🦬" "🦭" "🦮" "🦯" "🦰" "🦱" "🦲" "🦳" "🦴" \
              "🦵" "🦶" "🦷" "🦸" "🦹" "🦺" "🦻" "🦼" "🦽" "🦾" \
              "🦿" "🧀" "🧁" "🧂" "🧃" "🧄" "🧅" "🧆" "🧇" "🧈" \
              "🧉" "🧊" "🧋" "🧌" "🧍" "🧎" "🧏" "🧐" "🧑" "🧒" \
              "🧓" "🧔" "🧕" "🧖" "🧗" "🧘" "🧙" "🧚" "🧛" "🧜" \
              "🧝" "🧞" "🧟" "🧠" "🧡" "🧢" "🧣" "🧤" "🧥" "🧦" \
              "🧧" "🧨" "🧩" "🧪" "🧫" "🧬" "🧭" "🧮" "🧯" "🧰" \
              "🧱" "🧲" "🧳" "🧴" "🧵" "🧶" "🧷" "🧸" "🧹" "🧺" \
              "🧻" "🧼" "🧽" "🧾" "🧿")
          random_emoji=${emojis[$RANDOM % ${#emojis[@]}]}

          # Compose message
          message="📝 New blog post 📝
            \n\n '${title}' \
            \n\n ${random_emoji}  ${summary} \
            \n\n 👀  Read more at ${url} \
            \n\n ${hastags}"
          echo "MESSAGE=${message}" >> $GITHUB_ENV


      - name: 🦣 Toot it! 🦣
        if: ${{ env.POST_DATE }} > (date -d "-2 days" +%Y-%m-%d)
        env:
          MASTODON_INSTANCE: fosstodon.org
          MASTO_KEY: ${{ secrets.MASTO_KEY }}
        run:  |
          # First, upload the media and get the media ID
          MEDIA_ID=$(curl -X POST \
            -H "Authorization: Bearer ${MASTO_KEY}" \
            -F "file=@./${{ env.IMAGE }}" \
            https://${MASTODON_INSTANCE}/api/v1/media | jq -r '.id')

          # Then, create a new status with the media attached
          toot=$(curl -X POST \
            -H "Authorization: Bearer ${MASTO_KEY}" \
            -F "status=${{ env.MESSAGE }}" \
            -F "media_ids[]=${MEDIA_ID}" \
            https://${MASTODON_INSTANCE}/api/v1/statuses | jq -r '.id')

          # Display clickable url
          echo "🦣 Tooted! 🦣"
          echo "https://${MASTODON_INSTANCE}/web/statuses/${toot}"



