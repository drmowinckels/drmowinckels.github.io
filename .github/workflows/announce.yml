on: [workflow_dispatch]


name: Announce on social media

jobs:
  announce:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PROFILE: social_media
    steps:
      - uses: actions/checkout@v2
      - name: Get curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: üìù Get latest blog post üìù
        run: |
          BLOG_PATH="content/blog"

          # Find the latest blog post
          latest_post=$(find -f "${BLOG_PATH}" | grep /index.md$ | grep -v "XX-XX" |sort | tail -n1)

          # extract date
          date=$(grep "^date:" "${latest_post}" | sed 's/^date: //' | sed 's/["'\'']//g')
          echo "POST_DATE=${date}" >> $GITHUB_ENV

          # Extract the URL from the slug
          slug=$(grep "^slug:" "${latest_post}" | sed 's/^slug: //' | sed 's/["'\'']//g')
          url="https://drmowinckels.io/blog/${slug}"
          echo "URL=${url}" >> $GITHUB_ENV

          # Extract image
          image=$(grep "^image:" "${latest_post}" | sed 's/^image: //' | sed 's/["'\'']//g')
          image=$(printf 'content/blog/%s/%s' ${slug} ${image})
          echo "IMAGE=${image}" >> $GITHUB_ENV

          # Extract the title from yaml
          title=$(grep "^title:" "${latest_post}" | sed 's/^title: //' | sed 's/["'\'']//g')
          echo "TITLE=${title}" >> $GITHUB_ENV

          # Extract summary using yml
          summary=$(awk '/summary:/ {getline; while ($0 !~ /^$/) {gsub(/^[[:blank:]]+/,"",$0); print $0; getline}}' ${latest_post})
          echo "SUMMARY=${summary}" >> $GITHUB_ENV

          # Extract tags
          tags=$(awk '/tags:/ {getline; while ($0 ~ /^  - /) {printf "#%s ", $2; getline}}' ${latest_post})
          hastags=$(echo $tags| sed -e 's/#r /#rstats /')
          echo "TAGS=${hastags}" >> $GITHUB_ENV

          # Insert random fun emoji
          emojis=("ü¶Ñ" "ü¶ú" "ü¶£" "ü¶•" "ü¶¶" "ü¶ß" "ü¶®" "ü¶©" "ü¶™" \
              "ü¶´" "ü¶¨" "ü¶≠" "ü¶Æ" "ü¶Ø" "ü¶∞" "ü¶±" "ü¶≤" "ü¶≥" "ü¶¥" \
              "ü¶µ" "ü¶∂" "ü¶∑" "ü¶∏" "ü¶π" "ü¶∫" "ü¶ª" "ü¶º" "ü¶Ω" "ü¶æ" \
              "ü¶ø" "üßÄ" "üßÅ" "üßÇ" "üßÉ" "üßÑ" "üßÖ" "üßÜ" "üßá" "üßà" \
              "üßâ" "üßä" "üßã" "üßå" "üßç" "üßé" "üßè" "üßê" "üßë" "üßí" \
              "üßì" "üßî" "üßï" "üßñ" "üßó" "üßò" "üßô" "üßö" "üßõ" "üßú" \
              "üßù" "üßû" "üßü" "üß†" "üß°" "üß¢" "üß£" "üß§" "üß•" "üß¶" \
              "üßß" "üß®" "üß©" "üß™" "üß´" "üß¨" "üß≠" "üßÆ" "üßØ" "üß∞" \
              "üß±" "üß≤" "üß≥" "üß¥" "üßµ" "üß∂" "üß∑" "üß∏" "üßπ" "üß∫" \
              "üßª" "üßº" "üßΩ" "üßæ" "üßø")
          random_emoji=${emojis[$RANDOM % ${#emojis[@]}]}
          echo "EMOJI=${random_emoji}" >> $GITHUB_ENV

      - name: ü¶£ Toot it! ü¶£
        if: ${{ env.POST_DATE }} > (date -d "-2 days" +%Y-%m-%d)
        env:
          MASTODON_INSTANCE: fosstodon.org
          MASTO_KEY: ${{ secrets.MASTO_KEY }}
        run:  |
          # Compose message
          message="üìù New blog post üìù
            \n\n '${{ env.TITLE }}' \
            \n\n ${random_emoji}  ${{ env.SUMMARY }} \
            \n\n üëÄ  Read more at ${{ env.URL }} \
            \n\n ${{ env.TAGS }}"

          # First, upload the media and get the media ID
          MEDIA_ID=$(curl -X POST \
            -H "Authorization: Bearer ${MASTO_KEY}" \
            -F "file=@./${{ env.IMAGE }}" \
            https://${MASTODON_INSTANCE}/api/v1/media | jq -r '.id')

          # Then, create a new status with the media attached
          toot=$(curl -X POST \
            -H "Authorization: Bearer ${MASTO_KEY}" \
            -F "status=${message}" \
            -F "media_ids[]=${MEDIA_ID}" \
            https://${MASTODON_INSTANCE}/api/v1/statuses | jq -r '.id')

          # Display clickable url
          echo "ü¶£ Tooted! ü¶£"
          echo "https://${MASTODON_INSTANCE}/web/statuses/${toot}"

      - name: Send newsletter
        env:
          KIT_KEY: ${{ secrets.KIT_KEY }}
        run: |
          # Create html email content
          content=$(cat <<EOF
            <div class="email-body-header" style="background-color:#f8f8f8">
              <table cellpadding="0" cellspacing="0" style="border-collapse:separate;mso-table-lspace:0pt;mso-table-rspace:0pt;width:100%;margin:0 auto">
                <tbody>
                  <tr>
                    <td style="vertical-align:top">
                      <table width="100%" border="0" cellspacing="0" cellpadding="0" style="border-collapse:separate;mso-table-lspace:0pt;mso-table-rspace:0pt;text-align:center;table-layout:fixed;float:none" class="email-image">
                        <tbody><tr><td align="center" style="vertical-align:top"><figure style="margin:1em 0;margin-top:12px;margin-bottom:12px;margin-left:0;margin-right:0;max-width:800px;width:100%"><div style="display:block"><img src="${{ env.IMAGE }}" width="800" height="auto" style="border:0 none;display:block;height:auto;line-height:100%;outline:none;-webkit-text-decoration:none;text-decoration:none;max-width:100%;border-radius:4px 4px 4px 4px;width:800px;height:auto;object-fit:contain"></div></figure></td></tr>
                        </tbody>
                      </table>
                      <h1 class="" style="font-weight:bold;font-style:normal;font-size:1em;margin:0;font-size:2em;font-weight:normal;font-family:Georgia,Times,'Times New Roman',serif;color:#023f3c;line-height:1.5">${{ env.TITLE }}</h1>
                      <p class="" style="margin:1em 0;font-size:18px;line-height:1.5em;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen-Sans,Ubuntu,Cantarell,'Helvetica Neue',sans-serif;color:#0c4848;font-size:16px;line-height:1.5">${{ env.SUMMARY }}</p>
                      <table width="100%" style="border-collapse:separate;mso-table-lspace:0pt;mso-table-rspace:0pt"><tbody><tr><td align="center" style="vertical-align:top"><a class="email-button" target="_blank" rel="noopener noreferrer" style="color:#0875c1;color:#825a83;margin-bottom:0.5em;border:0 none;font-size:16px;line-height:1.5;background-color:#0f6261;color:#ffffff;border-radius:24px;border-color:#0f6261;background-color:#0f6261;box-sizing:border-box;border-style:solid;color:#ffffff;display:inline-block;text-align:center;text-decoration:none;padding:12px 20px;margin-top:8px;margin-bottom:8px;font-size:16px;border-radius:4px 4px 4px 4px" href="${{ env.URL }}">Read the post</a></td></tr></tbody></table>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            EOF
            )

            # Escape special characters for JSON
            escaped_content=$(echo "$content" | jq -aRs . | sed 's/^"\(.*\)"$/\1/')

            # Construct JSON payload with properly content
            json_data=$(cat <<EOF
            {
              "api_secret": "${{ secrets.KIT_KEY }}",
              "description": "Blog post notification: ${{ env.POST_DATE }}",
              "subject": "${{ env.TITLE }} - Dr. Mowinckel's blog",
              "thumbnail_url": "${{ env.IMAGE }}",
              "public": true,
              "published_at": "${{ env.POST_DATE }}",
              "send_at": "${{ env.POST_DATE }}",
              "content": "${escaped_content}"
            }
            EOF
            )

            newsletter=$(curl -X POST \
              -H 'Content-Type: application/json' \
              -d "$json_data" \
              https://api.convertkit.com/v3/broadcasts
            )

            echo "$newsletter"

